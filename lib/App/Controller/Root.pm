package App::Controller::Root;

use strict;
use warnings;
use base 'Catalyst::Controller::reCAPTCHA';
use Data::Dumper qw/Dumper/;

use JSON::XS qw/encode_json /;
#use parent 'Catalyst::Controller';
#
# Sets the actions in this controller to be registered with no prefix
# so they function identically to actions created in MyApp.pm
#
__PACKAGE__->config->{namespace} = '';

=head1 NAME

App::Controller::Root - Root Controller for App

=head1 DESCRIPTION

[enter your description here]

=head1 METHODS

=cut

=head2 index

=cut

sub index :Path :Args(0) {
    my ( $self, $c ) = @_;

    # Hello World
	$c->forward('captcha_get') if $c->config->{recaptcha}->{default};
	#$c->forward('/report/search/stock') if $c->user_exists;
	
	## caching 
	
	my $rs ;

	$rs = $c->model("DemoDB::Customer")->everyone->all;
	$rs = $c->model("DemoDB::Product")->all_products->all;
	$rs = $c->model("DemoDB::Product")->groups->all;
	$rs = $c->model("DemoDB::Product")->types->all;
        
    $c->stash->{template} = "welcome.tt";
        
	
}


sub default :Path {
    my ( $self, $c ) = @_;
    $c->response->status(404);
    $c->error("Page Not Found");
}
sub subscribe : Local {
    my ( $self, $c ) = @_;

	if ($c->req->method eq 'POST') {
		
		$c->forward('captcha_check') if $c->config->{recaptcha}->{default};
        my $msg = q[
Welcome to Einvoices,

Thanking you for choosing Einvoices. Our sales representative will contact you shortly.  

For any further queries, you can reach us at sales@einvocies.biz

Regards

Team @ MK Software];

		$c->stash->{email} = {
			to => $c->req->param("email"),
			from => 'no-reply@einvoices.biz',
			subject => 'Autogenerated Response',
			body => $msg

		};
        $c->forward($c->view("Gmail") , "process");
        
        $msg = Dumper($c->req->params);
        $c->stash->{email} = {
			to => 'harshal@mksoftware.in',
			from => 'no-reply@einvoices.biz',
			subject => 'request to access demo account',
			body => "confirm buy from " . $msg
		};

        $c->forward($c->view("Gmail") , "process");

		$c->stash->{subscribe_ok} = 1;
	}
    $c->stash->{subscribe} = 1;
    #$c->forward("/index");
	$c->stash->{template} = "welcome.tt";
}


sub check : Local {
    my ( $self, $c ) = @_;
	
    if (    my $email = $c->req->params->{email}
             and my $password = $c->req->params->{password} ) {
		
		$c->forward('captcha_check') if $c->config->{recaptcha}->{default};

        unless ($c->authenticate( { username => $email, password => $password } ) ){

			$c->stash->{'message'} = 'Username or password incorrect';
		}	
    }
    $c->detach('index');
}

sub logout : Local {

    my ( $self, $c ) = @_;
    $c->logout();
	$c->detach('index');
}
sub auto:Private {

    my ( $self, $c ) = @_;
    
    unless ($c->can('cache')) {
		
		$c->log->debug("can't cahce");
    }

	$c->stash->{'date_begin'} 	= $c->model("DemoDB::Enumeration")->for("Master", "begin_date")->first->value;
	$c->stash->{'date_end'} 	= $c->model("DemoDB::Enumeration")->for("Master", "end_date")->first->value;
	$c->stash->{'company_name'} = $c->config->{company};

    my $schema = $c->model("DemoDB")->schema;
    
    $schema->user(1);

    if ($c->controller->action_for("check") 
        || $c->controller->action_for("register") 
        || $c->controller->action_for("subscribe") ){
        return 1;
    }

    unless ($c->user_exists) {
        $c->response->redirect($c->uri_for('/'));
        return 0;
    
    }else {
		
		$schema->user_name($c->user->get('name') || $c->user->get('username'));
    }

    return 1;
}

=head2 end

Attempt to render a view, if needed.

=cut

sub end : ActionClass('RenderView') {

	my ($self, $c ) = @_;

	if (@{ $c->error }) {
		$c->detach("/error");
	}
	if ($c->req->user_agent =~ /Opera Mobi|Opera Mini|iPhone|Mobile|ipod|blackberry|android|palm|windows\s+ce/) {

        $c->stash->{template} = "mobile/" . $c->stash->{template};
    }
	my $view = $c->req->param("_v") || 'html';

	if ( $view =~ m/json/i || $c->req->path =~ m/^ajax/) {
        
		my $return_data = { message => $c->stash->{message},
							error => $c->stash->{error} };

		## Bad piece of software 
		$return_data->{$_} = $c->stash->{$_} foreach qw/product sale purchase uom company /;
		$return_data->{"$_" . "_rs" } = $c->stash->{"$_" . "_rs"} foreach qw/product sale purchase uom company/;

        $c->response->body(encode_json($return_data));
        $c->response->content_type("text/plain");
        #$c->response->content_type("Application/x-json");some bug in jquery

        $c->response->headers->header( 'Content-Disposition' => '');
		
    } elsif ( $view =~ m/pdf/i ) {
		
        my $web_page = eval { $c->view('HTML')->render( $c, $c->stash->{template} ) };
		
        $c->stash->{wkhtml} = {
            html    => $web_page,
        };

		eval {
			$c->forward('App::View::Wkhtmltopdf') ;
		};
		$c->log->error($@) if ($@);

    }elsif ( $view =~ m/email/i ) {
		
        my $web_page = eval { $c->view('HTML')->render( $c, $c->stash->{template} ) };
		
		unless ($c->stash->{email} ) {

        	$c->stash->{email} = {
            	to      => $c->req->param('to'),
            	from    => 'error@einvoices.biz',
            	subject => 'Email from Einvoices',
 				template    => $c->stash->{'template'},
            	content_type => 'multipart/alternative'
        	};
		}

		eval {
			$c->forward('App::View::Gmail') ;
		};
		$c->log->error($@) if ($@);
    }
    
}

sub error : Local {

	my ($self, $c) = @_;



	$c->stash->{errors} = $c->error;
	
	foreach my $error (@ { $c->error }) {
		$c->log->error($error);
	}
	$c->error(0);

    $c->response->status(500);
    
    if ($c->req->user_agent =~ /Opera Mobi|Opera Mini|iPhone|Mobile|ipod|blackberry|android|palm|windows\s+ce/i) {
        $c->stash->{template} = "mobile/error.tt";
    }else {
        $c->stash->{template} = "error.tt";
    }
	
	$c->forward('/admin/email_error') if $c->config->{email_error};
	
	$c->stash->{email} = undef;

	$c->forward("View::HTML");
}
sub js : Local{

	my ($self, $c) = @_;

	$c->stash->{js} = 'all';
	
	my $max_age = 24*60*60;
	$c->response->headers->last_modified(time);
	$c->response->headers->expires(time + $max_age );
	$c->response->headers->header(cache_control => "public, max-age=$max_age");

	$c->forward("View::Javascript" );
}
sub css : Local{

	my ($self, $c) = @_;

	$c->stash->{css} = 'all';

	my $max_age = 24*60*60;
	$c->response->headers->last_modified(time);
	$c->response->headers->expires(time + $max_age );
	$c->response->headers->header(cache_control => "public, max-age=$max_age");
	$c->forward("View::Css");
}
sub debug : Local{

	my ($self, $c) = @_;

	$c->stash->{js} = 'all';

	$c->forward("View::Javascript");
}

sub favicon : Path('/favicon.ico') {
	my ( $self, $c ) = @_;

	$c->serve_static_file( $c->path_to("root","static","images","einvoices.ico"));
}


=head1 AUTHOR

Harshal Shah

=head1 LICENSE

his library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
